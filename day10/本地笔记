浪潮之巅
数学之美
失控


线程 VS 进程

进程 ：资源的集合
线程：操作cpu的最小单位

线程同时修改同一份数据时必须加锁mutex

递归锁 -- 锁中有锁

join等待一个线程结束

守护线程 服务于非守护线程

queue队列
    解耦
    提高处理效率

    FIFO
    LIFO

    消费者生产者模型

时间event
    红绿灯


---------------------------

IO 操作不占用cpu
计算占用cpu

python的多线程不适合cpu密集操作型的任务，适合io密集型的任务

python的多进程解决多核问题

linux上所有的进程都是由父进程启动的

进程间的queue共享数据实际上是克隆一份，通过pickle序列化


pipe

进程间的queue和pipe都是进程间数据的传递而不是数据的共享


进程间的数据共享 -- manage

进程锁 -- 存在的意义就是在屏幕上打印的时候不会乱，linux上会出现

进程池---同一时间在cpu上有多少进程在执行

if __name__ 作用：如果执行该脚本，就执行，如果在其他模块中import那就不会执行

回调函数的作用----只需要主进程的数据库连接，各个进程通过回调函数获取写日志

协程-微线程 yield在函数间的切换 单线程下实现的并发
    协程的好处
    1、无需线程上下文切换的开销
    2、无需原子操作锁定及同步的开销--可以理解为协程就是单线程（串行的）
    3、方便切换控制流，简化编程模型
    4、高并发+高扩展性+低成本 一个cpu支持上万个

    缺点：
    1、无法利用多核资源，协程需要和进程配合才能运行在多cpu上
    nginx是默认是单线程的，支持上万个并发
    2、进行阻塞，会阻塞整个程序


协程遇到io操作就切换IO操作比较耗时


greenlet -- 协程手动档
gevent -- 协程自动档


事件驱动与异步IO

    目前大部分的ui编程都是时间驱动模型，都会提供onClick()事件
    事件驱动是一种编程范式，与单线程、多线程都是网络编程常用的编程范式

    事件驱动碰到IO操作就交给操作系统，并且告诉操作系统IO结束后调用回调函数，告诉程序IO操作结束

IO多路复用

  1、用户空间与内核空间，操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，
  操作系统将虚拟空间分为用户控件和内核空间
  2、进程的阻塞：正在执行的进程，由于期待的抹些事情未发生，由系统自动执行阻塞原语（Block)
  3、文件描述符fd
  术语，用于表述指向文件的应用的抽象化概念，适用于unix、linux
  4、缓存I/O
  数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核缓冲区拷贝到应用程序的地址空间

    缺点：数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，
    这些数据拷贝操作所到来的cpu以及内存开销是非常大的

IO模式
    一次IO访问（read为例）
    会经历下面两个阶段：
    1、等待数据准备
    2、将数据从内核拷贝到进程中

    由于这两个阶段，linux产生了五种模式
    -阻塞I/O (blocking IO)
    -非阻塞I/O（nonblocking IO）
    —I/O多路复用（IO multiplexing)
    -信号驱动I/O(signal driven IO)  不常用
    -异步IO（asynchronous IO)


    阻塞I/O(blockding IO)
    linux中，默认情况下所有的socket recv 都是阻塞的

    非阻塞
    如果kernel数据没准备好，立刻返回error，
    用户判断返回内容，进行再次访问

    I/O多路复用  select，poll,epoll三种模式
    有些地方也称这种IO方式为event driven io

    IO多路复用就是一个进程能同时监测多个socket连接，
    当任意一个连接有数据时，就返回，然后客户端开始read收数据，（还是会卡）
    内核复制数据到用户


    异步I/O
    linux 下的asynchronous I/O用的也很少

    用户发起一个read请求，内核直接返回数据，
    用户可以干其他事了，内核监测数据，然后内核等数据准备好后，
    把数据发给用户，
    通知客户端来收

    同步I/O会导致用户的进程阻塞



select poll epoll
    django 也用的epoll
windows 不支持epoll
 epoll 同时支持水平触发（只要数据准备好就不停告诉用户）与边缘触发（只告诉用户一次）
       没有最大文件描述符数量限制

python中异步io的模块 asynico


select 代码实现 - 底层实现
epoll 代码实现 - 底层实现

selectors模块，对epoll的封装


